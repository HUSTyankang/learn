<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->
    <!--创建bean对象的三种方式 -->
    <!--第一种方式：使用默认构造函数创建
            在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。
            采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。
    -->


    <bean id="dao" class="com.spring.learn.dao.impl.DaoImpl" scope="prototype"></bean>

    <!--spring管理静态工厂-使用静态工厂的方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）-->
    <!-- 此种方式是: 使用StaticFactory类中的静态方法theClass创建对象，并存入spring容器
        id属性：指定bean的id，用于从容器中获取
        class属性：指定静态工厂的全限定类名
        factory-method属性：指定生产对象的静态方法
    -->
    <bean id="theClass1" class="com.spring.learn.factory.StaticFactory" factory-method="theClass"></bean>

    <!--第三种方式：spring管理实例工厂-使用实例工厂的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）-->
    <!-- 此种方式是： 先把工厂的创建交给spring来管理。然后在使用工厂的bean来调用里面的方法
        factory-bean属性：用于指定实例工厂bean的id。
        factory-method属性：用于指定实例工厂中创建对象的方法。
    -->
    <bean id="instanceFactory" class="com.spring.learn.factory.InstanceFactory"></bean>
    <bean id="theClass2"
          factory-bean="instanceFactory"
          factory-method="getTheClass"></bean>

    <!--bean的作用范围
        bean标签的scope属性：
            作用：用于指定bean的作用范围
            取值：
                singleton：单例，默认值
                prototype：多例
                request：作用于web应用的请求范围
                session：作用于web应用的会话范围
                global-session：作用于集群环境的会话范围（全局会话范围），当不是集群时，它就就是session。
    -->
    <!--bean对象的生命周期
        单例对象
            出生:当容器创建时对象出生
            活着:只要容器还在,对象一直活着
            死亡:容器销毁,对象消亡
        总结:单例对象的生命周期和容器周期相同
        多例对象:
            出生:当使用对象时spring框架创建
            活着：对象只要是在使用过程中就一直活着。
            死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收
    -->
    <bean id="service" class="com.spring.learn.service.impl.ServiceImpl"
          scope="prototype" init-method="init" destroy-method="destroy"></bean>
</beans>